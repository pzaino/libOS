#ifndef TESTLIB_H
#define TESTLIB_H

#ifdef __CC_NORCROFT
#pragma include_only_once
#pragma force_top_level
#ifndef EINVAL
#define EINVAL 22
#endif
#ifndef ENOENT
#define EBADF 9
#endif
#ifndef ENOTDIR
#define ENOTDIR 20
#endif
#endif

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <errno.h>

#define INC_FAILURES 1
#define DEC_FAILURES 2
#define GET_FAILURES 3
#define RESET_FAILURES 0

void write_string(const char *s); 
int test_failures(int action);

// --- Assertions ---
#define ASSERT_EQ(x, y, msg) \
    do { if ((x) != (y)) { \
        write_string("FAIL: "); write_string(msg); write_string("\n"); \
        test_failures(INC_FAILURES); \
    }} while (0);

#define ASSERT_NE(x, y, msg) \
    do { if ((x) == (y)) { \
        write_string("FAIL: "); write_string(msg); write_string("\n"); \
        test_failures(INC_FAILURES); \
    }} while (0);

#define ASSERT_GT(x, y, msg) \
    do { if ((x) <= (y)) { \
        write_string("FAIL: "); write_string(msg); write_string("\n"); \
        test_failures(INC_FAILURES); \
    }} while (0);

#define ASSERT_GE(x, y, msg) \
    do { if ((x) < (y)) { \
        write_string("FAIL: "); write_string(msg); write_string("\n"); \
        test_failures(INC_FAILURES); \
    }} while (0);

#define ASSERT_LT(x, y, msg) \
    do { if ((x) >= (y)) { \
        write_string("FAIL: "); write_string(msg); write_string("\n"); \
        test_failures(INC_FAILURES); \
    }} while (0);

#define ASSERT_LE(x, y, msg) \
    do { if ((x) > (y)) { \
        write_string("FAIL: "); write_string(msg); write_string("\n"); \
        test_failures(INC_FAILURES); \
    }} while (0);

#define ASSERT_OK(x, msg) \
    ASSERT_EQ((x), 0, msg)

#define ASSERT_FAIL(x, msg) \
    ASSERT_EQ((x), 1, msg)

#define ASSERT_ERRNO(val, msg) \
    do { \
        if (errno != (val)) { \
            write_string("FAIL (errno): "); write_string(msg); write_string("\n"); \
            test_failures(INC_FAILURES); \
        } \
    } while (0);

// Library functions:

void write_string(const char *s) {
    if (!s) return;
    puts(s);
}

int test_failures(int action) {
    static int fail_num = 0;
    if (action == RESET_FAILURES) {
        fail_num = 0;
        return 0;
    }
    if (action == INC_FAILURES) {
        return ++fail_num;
    }
    if (action == DEC_FAILURES) {
        return --fail_num;
    }
    if (action == GET_FAILURES) {
        return fail_num;
    }
    return -1; // Invalid action
}

#endif // TESTLIB_H
