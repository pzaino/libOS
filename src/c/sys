/* sys.c - System information wrappers for RISC OS SWIs (libOS) */

#include "common.h"
#include "sys.h"
#include "fs.h"
#include "fcntl.h"
#include "proc.h"

#include <string.h>
#include <stdlib.h>
#include <errno.h>

// Get the system name and version
int os_uname(struct os_utsname *name) {
    if (!name) {
        errno = EINVAL;
        return -1;
    }

    // Fallback values
    strncpy(name->sysname,  "RISCOS",    sizeof(name->sysname) - 1);
    strncpy(name->nodename, "localhost", sizeof(name->nodename) - 1);
    strncpy(name->machine,  "ARM",       sizeof(name->machine) - 1);
    strncpy(name->release,  "unknown",   sizeof(name->release) - 1);
    strncpy(name->version,  "unknown",   sizeof(name->version) - 1);

    // Try to get version using *FX 0 (redirected to file or buffer)
    const _kernel_oserror *err = _swix(OS_Byte, _INR(0,1) | _OUT(0),
                                       0, 0);
    
    // Set both release and version fields
    strncpy(name->release, err->errmess, sizeof(name->release) - 1);
    strncpy(name->version, err->errmess, sizeof(name->version) - 1);

    // Ensure null-termination
    name->sysname[sizeof(name->sysname) - 1]   = '\0';
    name->nodename[sizeof(name->nodename) - 1] = '\0';
    name->release[sizeof(name->release) - 1]   = '\0';
    name->version[sizeof(name->version) - 1]   = '\0';
    name->machine[sizeof(name->machine) - 1]   = '\0';

    return 0;
}


// Get hostname (same as nodename from uname)
int os_gethostname(char *name, size_t len) {
    if (!name || len == 0) {
        errno = EINVAL;
        return -1;
    }

    strncpy(name, "localhost", len - 1);
    name[len - 1] = '\0';
    return 0;
}

// Return UID/GID info — RISC OS is single-user, always root-equivalent
int os_getuid(void)    { return 0; }
int os_geteuid(void)   { return 0; }
int os_getgid(void)    { return 0; }
int os_getegid(void)   { return 0; }

// Return user login name — fixed on RISC OS
char *os_getlogin(void) {
    return "riscos";
}
