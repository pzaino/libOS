/* fs.c - File system wrappers for RISC OS SWIs (libOS) */

#include "common.h"
#include "fs.h"

#include <stdlib.h>
#include <string.h>

// ----------------------------
// File and Directory Operations
// ----------------------------

int os_mkdir(const char *path, int mode) {
    (void)mode;
    if (!path || *path == '\0') {
        errno = EINVAL;
        return -1;
    }

    const _kernel_oserror *err = _swix(OS_File, _INR(0,1), 8, path);  // Create directory
    if (err) {
        errno = os_map_error(err->errnum);
        return -1;
    }
    return 0;
}

int os_rmdir(const char *path) {
    if (!path || *path == '\0') {
        errno = EINVAL;
        return -1;
    }

    const _kernel_oserror *err = _swix(OS_FSControl, _INR(0,1), 25, path); // Delete directory
    if (err) {
        errno = os_map_error(err->errnum);
        return -1;
    }
    return 0;
}

int os_chdir(const char *path) {
    if (!path || *path == '\0') {
        errno = EINVAL;
        return -1;
    }

    const _kernel_oserror *err = _swix(OS_FSControl, _INR(0,1), 0, path); // Set current dir
    if (err) {
        errno = os_map_error(err->errnum);
        return -1;
    }
    return 0;
}

char *os_getcwd(char *buf, size_t size) {
    if (!buf || size == 0) {
        errno = EINVAL;
        return NULL;
    }

    const _kernel_oserror *err = _swix(OS_FSControl, _INR(0,2), 37, buf, size);
    if (err) {
        errno = os_map_error(err->errnum);
        return NULL;
    }
    return buf;
}

int os_unlink(const char *path) {
    if (!path || *path == '\0') {
        errno = EINVAL;
        return -1;
    }

    const _kernel_oserror *err = _swix(OS_File, _INR(0,1), 6, path); // Delete file
    if (err) {
        errno = os_map_error(err->errnum);
        return -1;
    }
    return 0;
}

int os_rename(const char *oldpath, const char *newpath) {
    if (!oldpath || *oldpath == '\0' || !newpath || *newpath == '\0') {
        errno = EINVAL;
        return -1;
    }

    const _kernel_oserror *err = _swix(OS_FSControl, _INR(0,2), 25, oldpath, newpath);
    if (err) {
        errno = os_map_error(err->errnum);
        return -1;
    }
    return 0;
}

int os_stat(const char *path, struct os_stat_t *st) {
    if (!path || *path == '\0' || !st) {
        errno = EINVAL;
        return -1;
    }

    int r[10];
    const _kernel_oserror *err = _swix(OS_File, _INR(0,1) | _OUTR(3,5),
                                 23, path,
                                 &r[3], &r[4], &r[5]);
    if (err) {
        errno = os_map_error(err->errnum);
        return -1;
    }

    st->st_mode = 0; // Placeholder
    st->st_size = (unsigned int)r[3];
    st->st_mtime = (unsigned int)r[5];
    return 0;
}

int os_access(const char *pathname, int mode) {
    (void)mode; // RISC OS doesnâ€™t enforce permissions
    if (!pathname || *pathname == '\0') {
        errno = EINVAL;
        return -1;
    }

    const _kernel_oserror *err = _swix(OS_File, _INR(0,1), 23, pathname);
    if (err) {
        errno = os_map_error(err->errnum);
        return -1;
    }
    return 0;
}

// ----------------------------
// File Descriptor Operations
// ----------------------------

int os_open(const char *path, int flags, int mode) {
    (void)mode;
    if (!path || *path == '\0') {
        errno = EINVAL;
        return -1;
    }

    int action = (flags & 0x03) == 0 ? 0x40 : (flags & 0x03) == 1 ? 0x42 : 0x43;
    int handle = 0;

    const _kernel_oserror *err = _swix(OS_Find, _INR(0,1) | _OUT(0), action, path, &handle);
    if (err) {
        errno = os_map_error(err->errnum);
        return -1;
    }

    return handle;
}

int os_close(int fd) {
    if (fd < 0) {
        errno = EBADF;
        return -1;
    }

    const _kernel_oserror *err = _swix(OS_Find, _INR(0,1), 0, fd); // Close file
    if (err) {
        errno = os_map_error(err->errnum);
        return -1;
    }
    return 0;
}

int os_read(int fd, void *buf, size_t count) {
    if (fd < 0 || !buf || count == 0) {
        errno = EINVAL;
        return -1;
    }

    int bytes_read = 0;
    const _kernel_oserror *err = _swix(OS_GBPB, _INR(0,3) | _OUT(4),
                                 3, fd, buf, count, &bytes_read);
    if (err) {
        errno = os_map_error(err->errnum);
        return -1;
    }
    return bytes_read;
}

int os_write(int fd, const void *buf, size_t count) {
    if (fd < 0 || !buf || count == 0) {
        errno = EINVAL;
        return -1;
    }

    int bytes_written = 0;
    const _kernel_oserror *err = _swix(OS_GBPB, _INR(0,3) | _OUT(4),
                                 1, fd, (void *)buf, count, &bytes_written);
    if (err) {
        errno = os_map_error(err->errnum);
        return -1;
    }
    return bytes_written;
}

long os_lseek(int fd, long offset, int whence) {
    if (fd < 0) {
        errno = EBADF;
        return -1;
    }

    if (whence != 0 && whence != 1) {
        errno = EINVAL;
        return -1;
    }

    if (whence == 1) {
        int current = 0;
        const _kernel_oserror *err = _swix(OS_Args, _INR(0,1) | _OUT(2), 0, fd, &current);
        if (err) {
            errno = os_map_error(err->errnum);
            return -1;
        }
        offset += current;
    }

    const _kernel_oserror *err = _swix(OS_Args, _INR(0,2), 1, fd, offset);
    if (err) {
        errno = os_map_error(err->errnum);
        return -1;
    }
    return offset;
}

// Rewind directory to beginning
void os_rewinddir(os_dir_t *dirp) {
    if (!dirp) {
        errno = EINVAL;
        return;
    }
    dirp->context = 0;
}

// Return current directory read position (context value)
long os_telldir(os_dir_t *dirp) {
    if (!dirp) {
        errno = EINVAL;
        return -1;
    }
    return dirp->context;
}

// Seek to a saved directory position (context value)
void os_seekdir(os_dir_t *dirp, long loc) {
    if (!dirp || loc < 0) {
        errno = EINVAL;
        return;
    }
    dirp->context = (int)loc;
}
