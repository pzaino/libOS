/* event.c - EventV claim/release wrappers for RISC OS (libriscos) */

#include "common.h"
#include "event.h"

#include <stddef.h>
#include <stdint.h>

// ----------------------------
// EventV Operations
// ----------------------------

// Claim an event handler by installing a handler on EventV
int os_event_claim(int event_number, void (*handler)(int, void *), void *pw) {
    (void)event_number; // Not usable in this API — EventV is global

    if (!handler) {
        errno = EINVAL;
        return -1;
    }

    const _kernel_oserror *err = _swix(OS_Claim,
                                       _INR(0,2),
                                       0x10, // EventV vector number
                                       handler,
                                       pw);
    if (err) {
        errno = os_map_error(err->errnum);
        return -1;
    }

    return 0;
}

// Release the EventV handler
int os_event_release(int event_number, 
                     void (*handler)(int, void *), void *pw) 
{
    (void)event_number;
    (void)handler;
    (void)pw;

    const _kernel_oserror *err = _swix(OS_Release,
                                       _IN(0),
                                       0x10); // EventV vector number

    if (err) {
        errno = os_map_error(err->errnum);
        return -1;
    }

    return 0;
}

// ----------------------------
// Events creation
// ----------------------------

// No official SWI exists to generate an event — we stub this
int os_event_generate(int event_number, int data, int x, int y) {
    (void)event_number;
    (void)data;
    (void)x;
    (void)y;
    errno = ENOTSUP;
    return -1;
}
