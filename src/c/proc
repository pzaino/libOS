/* proc.c - Process-related wrappers for RISC OS SWIs (libOS) */

#include "common.h"
#include "proc.h"

#include <stdlib.h>
#include <string.h>

// Return process ID (not meaningful on RISC OS)
int os_getpid(void) {
    return 1; // Assumed "main process"
}

// Return parent process ID (also not meaningful)
int os_getppid(void) {
    return 0; // No parent on RISC OS
}

// Get environment variable using XOS_ReadVarVal
char *os_getenv(const char *name) {
    if (!name || *name == '\0') {
        errno = EINVAL;
        return NULL;
    }

    static char value[256];

    const _kernel_oserror *err = _swix(OS_ReadVarVal,
                                       _INR(0, 4) | _OUT(1),
                                       name,         // r0
                                       value,        // r1
                                       sizeof(value),// r2
                                       0x01,         // r3: return as string
                                       0);           // r4
    if (err) {
        errno = os_map_error(err->errnum);
        return NULL;
    }

    return value;
}

// Set environment variable using XOS_SetVarVal
int os_setenv(const char *name, const char *value, int overwrite) {
    if (!name || *name == '\0' || !value) {
        errno = EINVAL;
        return -1;
    }

    if (!overwrite && os_getenv(name)) {
        return 0;
    }

    const _kernel_oserror *err = _swix(OS_SetVarVal,
                                       _INR(0, 2),
                                       name,     // r0
                                       value,    // r1
                                       0);       // r2: normal variable
    if (err) {
        errno = os_map_error(err->errnum);
        return -1;
    }

    return 0;
}

// Unset environment variable using XOS_SetVarVal with empty string
int os_unsetenv(const char *name) {
    if (!name || *name == '\0') {
        errno = EINVAL;
        return -1;
    }

    const _kernel_oserror *err = _swix(OS_SetVarVal,
                                       _INR(0, 2),
                                       name,   // r0
                                       "",     // r1: empty string
                                       0);     // r2: normal variable
    if (err) {
        errno = os_map_error(err->errnum);
        return -1;
    }

    return 0;
}

// Execute a system command using XOS_CLI
int os_system(const char *command) {
    if (!command || *command == '\0') {
        errno = EINVAL;
        return 1;
    }

    const _kernel_oserror *err = _swix(OS_CLI,
                                       _IN(0),
                                       command);
    if (err) {
        errno = os_map_error(err->errnum);
        return -1;
    }

    return 0;
}

// Stub for fork()
int os_fork(void) {
    errno = ENOTSUP;
    return -1;
}

// Stub for execvp()
int os_execvp(const char *file, char *const argv[]) {
    (void)file;
    (void)argv;
    errno = ENOTSUP;
    return -1;
}
